{
  "hash": "29af5ce063188961c4ed443714d0a754",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Extensions on GitHub\nauthor: Brady Johnston\ndate: 2025-09-19\ntoc: true\ntoc-depth: 1\nformat: \n  revealjs: \n    theme: [dracula, theme.scss]\n    output-file: slides.html\n  html: default\n\nfig-align: center\n\nexecute: \n  cache: true\n  eval: true\n---\n\n::: {.content-visible unless-format=\"revealjs\"}\n\nThese slides and accompanying blog post were created for my talk at the 2025 Blender conference. \n\nSee the slides below of click directly on [this link](slides.html).\n\n{{< revealjs \"slides.html\" >}}\n\n:::\n\n::: {.content-visible when-format=\"revealjs\"}\n## Slides are Available\n\n[bradyajohnston.github.io/talks/bcon2025](https://bradyajohnston.github.io/talks/bcon2025)\n\n{{< qrcode https://bradyajohnston.github.io/talks/bcon2025 height=500 width=500 >}}\n\n:::\n\n# Who am I?\n\n## I’m Brady!\n\n::: {.content-visible when-format=\"revealjs\"}\n\n- Biochemist & Biophysicist turned 3D Animator\n\n- 2022 talk about Visualising Viruses\n\n:::\n\n<iframe id=\"ytplayer\" type=\"text/html\" width=\"800\" height=\"450\" src=\"https://www.youtube.com/embed/adhTmwYwOiA?autoplay=1?mute=1&origin=http://bradyajohnston.github.io\" frameborder=\"0\"></iframe>\n\n\n## Molecular Nodes {background-video=\"https://imgur.com/IvMSiE1.mp4\" background-video-loop=\"true\" background-video-muted=\"true\"}\n\n::: {.content-visible when-format=\"revealjs\"}\n<!-- will only appear in slides -->\n- Import & Animation of molecular data sets\n- Brings data inside of Blender\n- Builds around Geometry Nodes\n:::\n\n\n:::: {.content-visible unless-format=\"revealjs\"}\n<!-- will only appear in blogpost -->\n\n\nThis hasn't been the first attempt at bringing molecular data sets into Blender, but I blieve it has so far been the most successful.\nIn a very short summary, we can think of atoms and molecules as a collection of vertices and edges.\nBlender knows how to handle vertices and edges. Once we have the data inside of Blender (along with a large number of 'molecular' attributes for points and edges) then the full power of Geometry Nodes is at our fingertips for molecular visualisation.\n\n::: {#fig-clathrin}\n<video src=\"https://imgur.com/IvMSiE1.mp4\" width=\"100%\" autoplay controls muted loop></video>\n\n\n\nA clathrin protein cage appearing, or summoning a protein via a DNA circle.\n\n:::\n::::\n\n::: {.content-visible when-format=\"revealjs\"}\n## Molecular Nodes\n<!-- will only appear in slides -->\n:::\n\n<video src=\"https://imgur.com/trg0voP.mp4\" width=\"100%\" autoplay controls muted loop></video>\n\n\n\n## Install as a python package?\n\n::: {.content-visible when-format=\"revealjs\"}\n<!-- will only appear in slides -->\n- Also built and distributed via [`pypi.org`](https://pypi.org/p/molecularnodes)\n:::\n\n\n::: {.content-visible unless-format=\"revealjs\"}\n> It's less likely than you'd think!\n\nCreating an add-on for Blender that can also be built and shipping as a python package was quite the task. \nIt leads to a variety of problems and strange engineering issues that come with writing code for Blender that a 'regular' python package wouldn't have to deal with. \n\nCovering that topic with all of our learnings would be a massive blog post itself. \nThe short version is that you can install molecularnodes from [`pypi`](https://pypi.org/p/molecularnodes) and use if for molecular rendering in python scripts of jupyter notebooks like this one.\n\n:::\n\n::: {#cell-fig-dna .cell output-location='slide' execution_count=2}\n``` {.python .cell-code code-line-numbers=\"|3-8|10-11|13-14|\"}\n# !pip install bpy molecularnodes\n\nimport molecularnodes as mn\ncanvas = mn.Canvas(\n    engine=mn.scene.Cycles(samples=16),\n    resolution=(1280, 720),\n    transparent=True\n    )\n\nmol = mn.Molecule.fetch(\"1BNA\")\nmol.add_style(\"vdw\")\n\ncanvas.frame_view(mol, (3.14, 3.14 / 2, 0))\ncanvas.snapshot()\n```\n\n::: {.cell-output .cell-output-display}\n![X-ray crystallography structure of a fragment of DNA.](index_files/figure-revealjs/fig-dna-output-1.png){#fig-dna}\n:::\n:::\n\n\n## [`databpy`](https://github.com/BradyAJohnston/databpy)\n\n- 'numpy-like' interfaces to attributes on objects\n\n```{.py code-line-numbers=\"|1-2|4-5|7-9|11-18|\"}\n# set the x component for the first 10 verts to 1.0\nobj[\"position\"][:10, 0] = 1.0 \n\n# add 1 to x, 2 to y, 3 to z component of position\nobj[\"position\"] += np.array([1, 2, 3]) \n\n# infers data types for storage and retrieval\nobj[\"att_name\"] = np.zeros(len(obj), dypte=int)\nobj[\"att_name\"] \n\n# get and set attributes on non-point domains\nobj.store_named_attribute(\n  data=np.zeros((len(bob), 4, 4), dtype=float),\n  name=\"a_matrix\",\n  domain=db.AttributeDomains.FACE\n  )\nobj.named_attribute()\n```\n\n# Building on GitHub\n\n::: {.content-visible when-format=\"revealjs\"}\n## Molecular Nodes on GitHub\n![](https://imgur.com/FSdfKNs.png)\n:::\n\n## Why build on GitHub?\n\n::: {.content-visible when-format=\"revealjs\"}\n:::: {.fragment}\n- Not paid at all, just benefited a lot from using it\n::::\n:::: {.fragment}\n- Other platforms offer similar (CodeBerg etc.) I just have experience with GitHub\n::::\n:::: {.fragment}\n- Free file hosting (within 'reason')\n::::\n:::: {.fragment}\n- Free compute for automated testing and deployment (public projects)\n::::\n:::: {.fragment}\n- Increased visibility [(>1,000 ⭐️!)]{.fragment}[(not guaranteed)]{.fragment}\n::::\n:::\n\n\n## Building & Distributing MN\n\n![](https://imgur.com/I4ky42g.png)\n\n## Building & Distributing MN\n\n- Run tests against different versions of Blender (including daily builds)\n- Run tests against `bpy` installed via `pip` for automated pipelines\n- Download and bundle `.whl` files with extension\n- Upload extension to GitHub & Extensions platform\n\n## Testing your Add-ons\n\n::: {.content-visible when-format=\"revealjs\"}\nCheck out Spencer's talk on testing add-ons: \n\n![](./img/semagnumtalk.png){fig-align=\"center\"}\n:::\n\n::: {.content-visible unless-format=\"revealjs\"}\nChecko out Spencer's talk on testing add-ons [here](https://docs.google.com/presentation/d/1fpKdehYaquHgWHV9NeWn7qkTfVRqRJMc7SklBTR4tmc/edit?slide=id.p#slide=id.p).\n\n{{< pdf ./img/semagnumtalk.pdf >}}\n:::\n\n## Anatomy of a GitHub Action\n:::: {.fragment}\n- Runs on hardware managed by GitHub\n  - Free for public projects\n  - Mac / Windows / Linux\n  - Mid-power  machines, no GPU\n::::\n:::: {.fragment}\n- Can use your own hardware as a GHA runner\n  - My PC with an RTX 3090 runs any GPU worklods back in Australia\n::::\n\n\n## Running Tests\n\n::: {.bigyaml}\n\n```{.yml code-line-numbers=\"|3-7|9-17|19|20-22|23-35\"}\nname: tests\n\non: \n    push:\n      branches: [\"main\"]\n    pull_request:\n      branches: [\"*\"]\n    \njobs:\n    blender:\n        runs-on: ${{ matrix.os }}\n        strategy:\n            max-parallel: 4\n            fail-fast: false\n            matrix:\n              version: [\"4.5\", \"daily\"]\n              os: [ubuntu-latest, macos-latest, windows-latest]\n        steps:\n            - uses: actions/checkout@v4\n            - uses: BradyAJohnston/setup-blender@v4\n              with:\n                version: ${{ matrix.version }}\n            - name: Install in Blender\n              run: |\n                blender -b -P tests/python.py -- -m pip install \".[test]\"\n            - name: Run Tests\n              run: |\n                blender -b -P tests/run.py -- -vv tests --cov --cov-report=xml\n    \n            - name: Expose coverage as a CI download \n              uses: actions/upload-artifact@v4\n              if: matrix.os == 'ubuntu-latest' && matrix.version == '4.2.5'\n              with:\n                name: coverage.xml\n                path: coverage.xml\n\n            - name: Upload coverage reports to Codecov\n              if: matrix.os == 'ubuntu-latest'\n              uses: codecov/codecov-action@v3\n```\n:::\n\n## Breaking 5.0 Changes\n\nTests are run daily on MacOS, Windows & Linux against the latest alpha builds from Blender.\n\n:::: {.fragment}\n- `BLENDER_EEVEE_NEXT` renamed to `BLENDER_EEVEE` [#855](https://github.com/BradyAJohnston/MolecularNodes/pull/885)\n::::\n\n:::: {.fragment}\n- Compositor no longer has `use_nodes` [#971](https://github.com/BradyAJohnston/MolecularNodes/pull/971)\n::::\n\n:::: {.fragment}\n- `Set Curve Resolution` not updating datablock [#141721](https://projects.blender.org/blender/blender/issues/141721#issuecomment-1625189)\n::::\n:::: {.fragment}\n- `bpy.data.materials.new()` starts with empty node tree (not BSDF + Output) [#980](https://github.com/BradyAJohnston/MolecularNodes/pull/980)\n::::\n\n::: {.content-visible when-format=\"revealjs\"}\n<!-- will only appear in slides -->\n:::\n\n::: {.content-visible unless-format=\"revealjs\"}\n<!-- will only appear in blogpost -->\nThese were some of the recent changes that were breaking the add-on but automated testing alterted us and we were able to fix it quickly. When 5.0 is released as long as we keep fixing the problems as they appear we can be confident that it will work day-of. \n\nFixing individual errors as they appear is also _much_ easier to debug than testing once the beta releases happen (or worse the final release) where multiple failures might pile up on top of each other.\n:::\n\n\n\n# Distributing on GitHub\n\n## 'Old School'\n::: {.fragment}\n- have your add-on be 'top-level' on GitHub - users just download the `.zip` of the repo and install\n:::\n::: {.fragment}\n  - Never clear when updates are out or what version is 'released'\n:::\n::: {.fragment}\n- package up `.zip` and create a GitHub release - users download from release page and check back for updates\n:::\n::: {.fragment}\n  - Clearer which version is currently released, requires users to manually update\n:::\n## Hip & New and Cool and Fresh with 'Extensions'\n::: {.fragment}\n- Host an `index.json` somewhere accessible on the network which points to files, allows automatic updates\n:::\n::: {.fragment}\n- Host an `index.json` and files all on GitHub\n  - Simple index for single add-on on a single repo\n  - A repo that indexes and builds multiple add-ons from multiple sources\n:::\n::: {.fragment}\n:::\n::: {.fragment}\n:::\n\n## A live example\n\n::: {.content-visible when-format=\"revealjs\"}\n<!-- will only appear in slides -->\n[github.com/BradyAJohnston/monkeymadness](https://github.com/BradyAJohnston/monkeymadness)\n:::\n\n:::: {#fig-monkey-madness}\n\n<video src=\"https://imgur.com/rfPbaUi.mp4\" heigh=\"70%\" autoplay controls muted loop></video>\n\nThe hottest new monkey-spawning add-on! (But is there a bug?)\n\n::::\n\n::: {.content-visible unless-format=\"revealjs\"}\n<!-- will only appear in blogpost -->\n\n\n\nThis is a minimal example of an add-on we can subscribe to.\n![](https://imgur.com/bawxoLK.png)\n\n:::\n\n\n## Your Personal Extensions Repo\n::: {.fragment}\n- Build and release add-ons on GitHub (through automations!) in their own repos\n:::\n::: {.fragment}\n- Compile multiple add-ons in a single subscribeable repo\n:::\n::: {.fragment}\n- Users add 'your personal repo' - they get updates just like they would from the official Extensions platform\n:::\n::: {.fragment}\n- [bradyajohnston.github.io/extensions](https://bradyajohnston.github.io/extensions)\n:::\n\n\n## How is it Built?\n\n::: {.content-visible unless-format=\"revealjs\"}\n<!-- will only appear in blogpost -->\nWe can use GitHub actions (or another similar service) to compile 'released' add-ons from multiple different services into a single extenion repo. \n\nImportantly we need Blender to run checksum on the actual files that your users will download before publishing the `index.json`. We don't host or serve the actual files ourselves, those remain on at the original publishing locations (the release pages of the individual repos). We just generate an index that points to those locations.\n:::\n\n```{.yaml code-line-numbers=\"|3-7|11-12|14-22|24-28|29-31|33-44\"}\nname: Download Release Files\n\non:\n  push:\n    branches: [\"main\"]\n  schedule:\n    - cron: '0 0 * * *'\n\njobs:\n  build-website:\n    runs-on: macos-latest\n    permissions: write-all\n    steps:\n      - uses: actions/checkout@v4\n      - uses: quarto-dev/quarto-actions/setup@v2\n      - uses: bradyajohnston/setup-blender@v4\n        with: \n          version: latest\n      - name: Install uv\n        uses: astral-sh/setup-uv@v4\n        with:\n            version: \"latest\"\n    \n      - name: Get Release Assets\n        run: |\n          uv run --with requests scripts/download.py\n        env:\n          GITHUB_TOKEN: ${{ github.token }}\n      - name: Generate index.json\n        run: |\n          blender --command extension server-generate --repo-dir=repo\n    \n      - name: Quarto Render\n        run: |\n          uv run --with pyyaml quarto render\n    \n      - name: Publish to GitHub Pages (and render)\n        uses: quarto-dev/quarto-actions/publish@v2\n        with:\n            target: gh-pages\n            path: .\n            render: false\n        env:\n            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```\n\n## Distributing your own Extensions\nDetails and built: https://bradyajohnston.github.io/extensions/\nSubscribe with:\n\n```bash\nhttps://bradyajohnston.github.io/extensions/index.json\n```\n\n## Blext\n\n- Package for building, maintaining and releasing extensions\n\n- [codeberg.org/so-rose/blext](https://codeberg.org/so-rose/blext)\n\n{{< qrcode https://codeberg.org/so-rose/blext width=300 height=300 >}}\n\n\n## Thanks!\n\n- `@bradyajohnston` everywhere\n- slides: [bradyajohnston.githbub.io/talks/bcon2025](https://bradyajohnston.github.io/talks/bcon2025)\n\n{{< qrcode https://bradyajohnston.github.io/talks/bcon2025 width=300 height=300 >}}\n\n\n::: {.content-visible when-format=\"revealjs\"}\n<!-- will only appear in slides -->\n:::\n\n::: {.content-visible unless-format=\"revealjs\"}\n<!-- will only appear in blogpost -->\n:::\n\n",
    "supporting": [
      "index_files/figure-revealjs"
    ],
    "filters": [],
    "includes": {}
  }
}