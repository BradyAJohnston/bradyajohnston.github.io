{
  "hash": "a215d02e0ec3da2e07d0cb8b2b405429",
  "result": {
    "markdown": "---\ntitle: \"Visualising Global Rubbish\"\ndate: \"2021-01-31\"\nauthor: \"Brady Johnston\"\nimage: \"images/paste-166E6C24.png\"\ncategories: [R, tidytuesday, data vis]\neditor: visual\neval: false\n---\n\n\n# Where Rubbish Ends Up\n\nFor this week's [#tidytuesday](https://github.com/rfordatascience/tidytuesday), I visualise the vast dataset of rubbish collected on the beaches all over the world.\n\n<video width=\"100%\"  autoplay loop>\n\n<source src=\"https://video.twimg.com/tweet_video/EtFnI90UUAE5QdB.mp4\" type=\"video/mp4\">\n\n</video>\n\nThe technical details can be viewed below the embedded tweet.\n\nThe data shows the headquarters for each company identified, and the lines show where the trash ended up.\nThe more dots that move along the line, the more junk found in those selected companies' locations.\n\nYou can play around with the final result at the bottom of this page.\n\n> The post can be seen below.\n\n# TidyTuesday\n\nJoin the R4DS Online Learning Community in the weekly #TidyTuesday event!\nEvery week we post a raw dataset, a chart or article related to that dataset, and ask you to explore the data.\nWhile the dataset will be \"tamed\", it will not always be tidy!\nAs such you might need to apply various R for Data Science techniques to wrangle the data into a true tidy format.\nThe goal of TidyTuesday is to apply your R skills, get feedback, explore other's work, and connect with the greater #RStats community!\nAs such we encourage everyone of all skills to participate!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(tidytuesdayR)\n```\n:::\n\n\n# Load the weekly Data\n\nDowload the weekly data and make available in the `tt` object.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntt <- tt_load(\"2021-01-26\")\n```\n:::\n\n\n# Readme\n\nTake a look at the readme for the weekly data to get insight on the dataset.\nThis includes a data dictionary, source, and a link to an article on the data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntt\n```\n:::\n\n\n# Glimpse Data\n\nTake an initial look at the format of the data available.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntt %>% \n  map(glimpse) \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntuesdata <- tt\n\ntuesdata$plastics %>% dplyr::filter()\nlibrary(stringi)\nplastics <- tuesdata$plastics %>% \n  filter(\n    !(parent_company %in% c(\"Grand Total\", \"null\", \"Null\", \"Unbranded\"))\n  ) %>% \n  mutate(\n    parent_company = parent_company %>% \n      tolower() %>% \n      stri_trans_general(\"Latin-ASCII\") %>% \n      stri_trans_totitle(),\n    country = stringi::stri_trans_totitle(country)\n  ) \n```\n:::\n\n\nThen, we can get the top five polluters for the three years of analysis (2019-2020)\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntop_Co <-  plastics %>% \n  group_by(parent_company) %>% \n  summarise(\n    country_count = n_distinct(country), \n    grand_total_sum = sum(grand_total, na.rm = T)\n  ) %>% \n  arrange(-country_count, -grand_total_sum) %>% \n  head(5)\ntop_Co\n```\n:::\n\n\nThen, we can manually obtain headquarters locations from https://www.crunchbase.com/lists/companies-search-with-headquarters\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhq <- c(\n  \"Atlanta, Georgia, United States\", #Coca-Cola\n  \"New York, New York, United States\", #PepsiCo\n  \"Vevey, Vaud, Switzerland\", #Nestle\n  \"Mclean, Virginia, United States\", #Mars\n  \"London, England, United Kingdom\" #Unilever\n)\n```\n:::\n\n\nAnd we merge the data, and add a geocoded lat, long using `tidygeocoder` to finally transform into an sf.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidygeocoder)\ncoords = geo(hq, method = \"osm\")\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncountries = plastics %>% \n  filter(parent_company %in% top_Co$parent_company) %>% \n  group_by(country) %>% \n  summarise(count = n())\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncoords_countries = geo(countries$country, method = \"osm\")\n# Get Taiwan coordinates, which was not recognized\ncoords_taiwan = geo(\"Taiwan\", method = \"osm\")\ncoords_country = coords_countries %>% \n  mutate(\n    lat = ifelse(address == \"Taiwan_ Republic Of China (Roc)\", coords_taiwan$lat, lat),\n    long = ifelse(address == \"Taiwan_ Republic Of China (Roc)\", coords_taiwan$long, long)\n) \n```\n:::\n\n\n\n\n### Matching the countries with their lat / long.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncountries <- countries %>% \n  left_join(coords_country,  by = c(\"country\" = \"address\"))\ncountries\n```\n:::\n\n\n### Matching the companies with their lat / long\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntop_parent_companies = top_Co %>% \n  mutate(hq = hq, lat = coords$lat, long = coords$long) %>% \n  # st_as_sf(crs = 4326, coords = c(\"long\", \"lat\")) %>%\n  mutate(parent_company = case_when(\n    parent_company == \"The Coca-Cola Company\" ~ \"Coca-Cola\",\n    parent_company == \"Mars, Incorporated\" ~ \"Mars, Inc.\",\n    TRUE ~ parent_company\n  )) %>% \n  select(name = parent_company) %>% \n  mutate(type = \"Parent Company\")\n\ncompanies <- top_Co %>% \n  mutate(hq = hq, com_lat = coords$lat, com_long = coords$long)\n```\n:::\n\n\n### Joining the countries and the companies into one df.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncom_countries <- plastics %>% \n  select(country, parent_company, grand_total)\n# companies\nplotting <- com_countries %>% \n  left_join(countries) %>% \n  left_join(companies) %>% \n  filter(parent_company %in% companies$parent_company)\nplotting\n```\n:::\n\n\n## Using the joined data for the final plot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# remotes::install_github(\"JohnCoene/echarts4r.assets\")\n\nlibrary(echarts4r)\nlibrary(echarts4r.assets)\nplotting %>% \n  group_by(parent_company) %>% \n  e_charts() %>% \n  e_globe(\n    environment = gray(0.1),\n    base_texture = ea_asset(\"world\"), \n    shading = 'lambert', \n    light.ambient = list(intensity = 10)\n  ) %>% \n  e_lines_3d(\n    com_long, \n    com_lat, \n    long, \n    lat, \n    value = count,\n    source_name = parent_company, \n    target_name = country,\n    effect = list(show = TRUE)\n  ) %>% \n  e_legend_toggle_select(name = \"Company\") %>% \n  e_legend(textStyle = list(color = gray(0.9)))\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}